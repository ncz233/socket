#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>

//一下是linux网络多线程编程大纲
//线程同步概念
// 协调同步,按预定先后次执行(也就是需要排队去实现)
// 与时间有关的错误(要解决的问题)
// 数据混乱(产生现象,原因)
//  资源共享
//  调度随机
//  缺乏必要的同步机制(如果加线程同步执行效率会低,不加数据混乱)
// 多个控制流访问同一共享资源,必须同步
//同步的方式有
// 互斥量(互斥锁),读写锁,条件变量,信号量
//互斥锁
// 这些方式他都是linux提供给我们的一种建议锁(mutex)
//  这个锁,他不会限制资源访问,线程不按规则访问数据依然成功,会出现数据混乱
// 互斥锁怎么用呢
//  我们需要借助一系列的函数,加锁减锁初始化销毁
//  互斥锁的类型定义pthread_mutex_t类型 本质结构体 简化 0,1(为1初始化成功,为0初始化失败原因被线程占用上了)
//  返回值 成功0,错误返回错误号
// 初始化互斥锁
//  pthread_mutex_init
//		初始化一把互斥锁 1
//	参数(都是指针)
//		互斥锁mutex(传出)
//		互斥锁属性attr(传入)	默认属性NULL
//		restrict 并键字		所有修改该指针指向内存中内容的操作，只能通过本指针完成
//	静态初始化 : pthead_mutex_t muetx = PTHREAD_MUTEX_INITIALIZER;
//		调用函数初始化和全局宏定义
// 销毁锁
//  pthread_mutex_destrpy销毁一个互斥锁
//	参数;
//		互斥锁& mutex
//
// 
//

//开始网络编程(5天)
// 网络基础
//	协议概念
//		什么是协议
//			一组规则,访问数据或者进行数据传递存储的规则;
//			tcp注重于数据的传输,https注重于数据的解释
//			常见的协议有
//				传输层常见 协议有TCP/UDP协议。
//				应用层常见 协议有HTTP协议，FTP协议, ssh,。
//				网络层常见 协议有IP协议、ICMP协议、IGMP协议。
//				网络接口层常见 协议有ARP协议、RARP协议, 以太网帧协议。
//			osi网络7层模型
//				顺口溜:"物,数,网,传,会,表,应"
//			tcp/ip4层协议
//				分别对应"网络接口层(物,数),网络层,传输层,应用层(会,表)"
//			网络传输数据封装流程
//				数据没有封装之前，是不能在网络中传递。应用层->传输层->网络层->数据链路层 = 数据链路层->网络层->传输层->应用层
//				应用层需要自己手动用代码封装,剩下的是内核层不需要我们来封装
//				不同的协议层对数据包有不同的称谓，在传输层叫做段( segment)，在网络层叫做数据报（datagram)，在链路层叫做帧（frame)。数据封装成帧后发到传输介质上，到达目的主机后每层协议再剥掉相应的首部，最后将应用层数据交给应用程序处理。。
//			以太网帧格式如下所示
//				以太网首部(目标地址(6) 源地址(6) 类型(2)) 数据(ip首部(20) tcp首部(20) 应用数据(?)) 以太网尾部(crc(4)) 数据一共长是46-1500字节
//				arp和rarp请求:arp根据ip地址获取mac地址(类型0806).rarp是根据mac地址找ip地址
//				以太网帧协议:根据mac地址,完成数据包传输
//			ip协议
//				版本ipv4和ipv6 - 4字节
//				ttl:是到达目的地的次数默认28个,经过每个路由器-1,直到为0或者找到才停止 - 8字节
//				IP地址源和目的,大小都是4字节,32位的二进制,人类看到的是点分十进制是string类型
//				IP地址:可以在网络环境中,唯一标识一台主机.
//				端口号:可以网络的一台主机上.唯一标识一个进程
//				ip地址+端口号:可以在网络环境中，唯一标识一个进程.
//			udp协议()
//				源端口号:16位	2^16	0-65535
//				目标端口号:16位	2^16
// 
//			tcp协议(面向连接的)
//				源端口号:16位	2^16	0-65535
//				目标端口号:16位	2^16
//				32位序号:
//				32位确认序号:
//				6个标志位:
//				16位的窗口大小
//			b/s和c/s模型
//				c/s:client/server(客户端/服务器)
//				b/s:browser/server(浏览器/服务器)
//				c/s(真实的游戏app)
//					优点:可以缓存大量数据(速度快),可以自定义协议,迭代更新方便
//					缺点:安全性差,跨平台差,开发工作量较大
//				b/s(云游戏)
//					优点:安全性好,跨平台好,开发工作量较小
//					缺点:不能缓存大量数据,严格遵守http协议
//			通信协议
// 
// socket编程
//	套接字:socket
//		在通信过程中,套接字一定是成对出现的(前提是在通信过程中).
//		两个完成数据通信必须有两个socket
//		|文件描述符:管道符| 有两个文件描述符,一个在|符前,另一个在|符后,中间有一个缓存
//		socket文件描述符:只有一个文件描述符去管理套接字,在套接字里面,有两个缓冲区,一个是发送,一个是接收,套接字读写都是用一个文件描述符,但是他内部有两个缓冲区
//		一个文件描述符指向一个套接字(该套接字内部有内核借助两个缓冲区实现)
//	网络字节序
//		涉及到大小端,在以前计算机中是小段法,高位高地址,地位低地址 如:1234 12是高,34是低,答案是34 12
//		大端法:高位存底地址,底位存高地址
//		这是历史遗留问题,但英特尔是小端存储的
//		但tcp/ip协议规定网络数据流采用大端字节序
//	
// 
// 高并发服务器
//	
//
