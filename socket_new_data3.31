#define _CRT_SECURE_NO_WARNINGS 1

//一下是linux网络多线程编程大纲
//线程同步概念
// 协调同步,按预定先后次执行(也就是需要排队去实现)
// 与时间有关的错误(要解决的问题)
// 数据混乱(产生现象,原因)
//  资源共享
//  调度随机
//  缺乏必要的同步机制(如果加线程同步执行效率会低,不加数据混乱)
// 多个控制流访问同一共享资源,必须同步
//同步的方式有
// 互斥量(互斥锁),读写锁,条件变量,信号量
//互斥锁
// 这些方式他都是linux提供给我们的一种建议锁(mutex)
//  这个锁,他不会限制资源访问,线程不按规则访问数据依然成功,会出现数据混乱
// 互斥锁怎么用呢
//  我们需要借助一系列的函数,加锁减锁初始化销毁
//  互斥锁的类型定义pthread_mutex_t类型 本质结构体 简化 0,1(为1初始化成功,为0初始化失败原因被线程占用上了)
//  返回值 成功0,错误返回错误号
// 初始化互斥锁
//  pthread_mutex_init
//		初始化一把互斥锁 1
//	参数(都是指针)
//		互斥锁mutex(传出)
//		互斥锁属性attr(传入)	默认属性NULL
//		restrict 并键字		所有修改该指针指向内存中内容的操作，只能通过本指针完成
//	静态初始化 : pthead_mutex_t muetx = PTHREAD_MUTEX_INITIALIZER;
//		调用函数初始化和全局宏定义
// 销毁锁
//  pthread_mutex_destrpy销毁一个互斥锁
//	参数;
//		互斥锁& mutex
//
// 
//
