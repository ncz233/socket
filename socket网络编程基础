#define _CRT_SECURE_NO_WARNINGS 1
#include<WinSock2.h>
//学习方法
// 万事开头难,有点难度
// 先将一些必要的概念,听不懂也没关系
// 然后让网络通信程序跑起来,实现通信的功能
// 再然后详细的介绍程序的流程,更多的概念,函数细节和实战经验
//要有耐心反复观看视频,多动手,多测试
// 
//概念
// socket就是插座(中文翻译成套接字)运行在计算机中的两个程序通过socket建立起一个通道,数据在通道中传输
// socket把复杂的tcp/ip协议族隐藏了起来,对程序员来说,只要用好socket相关的函数,就可以完成网络通信了
// 
//socket提供了流(stream)和数据报(datagram)两种通信机制,即流socket和数据包socket.
// 流socket基于tcp协议,是一个有序,可靠,双向字节流的通道,传输数据不会丢失,不会重复,顺序也不会错乱
// 数据报socket基于udp协议,不需要建立和维持链接,可能会丢失或错乱,udp不是一个可靠的协议,对数据的长度有限制,但是他的效率比较高
// 某些应用层协议,处于历史原因,受当时技术和网络跳进啊的限制,选择了基于udp实现,其选择的历有现在很可能已经不再成立了.
// 实时的音频聊天采用udp,这种业务可以接受数据丢失且不必重传.本专题视频只介绍流socket,数据报socket的应用场景实在太少,以后可能更少
// 只介绍流的socket即tcp协议
// 
// 简单的socket通信流程 客户/服务模式 简称c/s
// 客户端
// socket();//创建流式socket
// connect();//向服务器发起链接请求.
// send()/recv();//发送/接受数据	和服务端链接通信的通道
// close();//关闭socket链接,释放资源
// 
// 服务端
// socket();//创建流式socket
// bind();//指定用于通信的IP地址和端口
// lieten();//把socket设置为监听模式
// accept();//接受客户端的链接
// recv()/send();//接收/发送数据	和服务端链接通信的通道
// close();//关闭socket链接,释放资源
// 
//c语言技术网(www.freecplus.net)
//

//客户端配置
// socket通信的客户端类
/*
 * 程序名：client.cpp，此程序用于演示socket的客户端
 * 作者：C语言技术网(www.freecplus.net) 日期：20190525
*/
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#include <netdb.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>

int main(int argc, char* argv[])
{
    if (argc != 3)
    {
        printf("Using:./client ip port\nExample:./client 127.0.0.1 5005\n\n"); return -1;
    }

    // 第1步：创建客户端的socket。
    int sockfd;
    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1) { perror("socket"); return -1; }
    printf("sockfd=%d\n", sockfd);
    //sleep(10);
    //return 0;//详解socket的过程

    // 第2步：向服务器发起连接请求。
    struct sockaddr_in servaddr;
    memset(&servaddr, 0, sizeof(servaddr));

    struct hostent* h;
    if ((h = gethostbyname(argv[1])) == 0)   // 指定服务端的ip地址。h = gethostbyname(argv[1]))转换ip地址和端口号的,给个域名也会解析,返回值是一个结构体
    {
        printf("gethostbyname failed.\n"); close(sockfd); return -1;
    }
    memcpy(&servaddr.sin_addr, h->h_addr, h->h_length); //在客户端这里用的是一个结构体去存放服务端的ip地址,网络编程中不管是客户端还是服务端都是用struct sockaddr_in结构体来存放的,但IP地址和端口我们不能直接去赋值需要转换
    //上段代码到 struct hostent* h; 的时候可以替换成servaddr.sin_addr.s_addr=inet_addr(argv[1]);换成之后无法解析域名了.所以还是上面的比较好

    servaddr.sin_family = AF_INET;  //协议族
    servaddr.sin_port = htons(atoi(argv[2])); // 指定服务端的通信端口。用网络字节顺序,为了兼容性用
    //servaddr.sin_port = atoi(argv[2]); // 指定服务端的通信端口。不用网络字节顺序
    
    if (connect(sockfd, (struct sockaddr*)&servaddr, sizeof(servaddr)) != 0)  // 向服务端发起连接清求。并不是等服务端accept(等待对方链接),其实在服务端做到listen(主动变成被动)这一步客户端就已经可以connect(链接了),服务端调用accept是为了响应listen
    {
        perror("connect"); close(sockfd); return -1;
    }

    char buffer[1024];

    //sleep(10);//如果连接上了不发会在服务端recv等待
    // 第3步：与服务端通信，发送一个报文后等待回复，然后再发下一个报文。
    for (int ii = 0; ii < 3; ii++)
    {
        int iret;
        memset(buffer, 0, sizeof(buffer));
        sprintf(buffer, "这是第%d个超级女生，编号%03d。", ii + 1, ii + 1);
        if ((iret = send(sockfd, buffer, strlen(buffer), 0)) <= 0) // 向服务端发送请求报文。通道建立完之后就可以收发报文了sockfd(客户端), buffer(缓冲区), strlen(buffer)(buffer长度也是要发多少字节), 0(固定填写0)
        {
            perror("send"); break;
        }
        printf("发送：%s\n", buffer);

        memset(buffer, 0, sizeof(buffer));
        if ((iret = recv(sockfd, buffer, sizeof(buffer), 0)) <= 0) // 接收服务端的回应报文。如果没走完服务端的第三步(listen)他就会卡住等待服务端响应
        {
            printf("iret=%d\n", iret); break;
        }
        printf("接收：%s\n", buffer);
    }

    // 第4步：关闭socket，释放资源。
    close(sockfd);
}

//服务器
// socket通信的服务端类
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#include <netdb.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>

int main(int argc, char* argv[])
{
    if (argc != 2)
    {
        printf("Using:./server port\nExample:./server 5005\n\n"); return -1;
    }

    // 第1步：创建服务端的socket。
    int listenfd;   //文件描述符,unix下一切都是文件,0(标准输入) 1(标准输出) 2(标准错误) -1(错误)
    if ((listenfd = socket(AF_INET, SOCK_STREAM, 0)) == -1) { perror("socket"); return -1; }
    printf("listenfd=%d\n", listenfd); //这个是3,如果gdb调试的话是从7开始的,为什么是7,可能因为gdb内打开了文件,前面的文件描述符(0123456)被重用了,所以socket的文件描述符只有从7开始
    //sleep(10);
    //return 0;//详解socket的过程

    // 第2步：把服务端用于通信的地址和端口绑定到socket上。
    struct sockaddr_in servaddr;    // 服务端地址信息的数据结构。
    memset(&servaddr, 0, sizeof(servaddr));//对servaddr地址初始化,初始化的值为0,一共有sizeof(servaddr)的空间
    servaddr.sin_family = AF_INET;  // 协议族，在socket编程中只能是AF_INET。(固定填写这个)
    servaddr.sin_addr.s_addr = htonl(INADDR_ANY);          // 任意ip地址。
    //servaddr.sin_addr.s_addr = inet_addr("192.168.190.134"); // 指定ip地址。inet_addr函数可以把字符转换成32位二进制网络字节顺序的无符号整数
    servaddr.sin_port = htons(atoi(argv[1]));  // 指定通信端口。使用网络字节顺序,为了兼容性还是用比较好,转换成网络字节顺序
    //servaddr.sin_port = atoi(argv[1]);  // 指定通信端口。这个是不用网络字节顺序,但是你如果不用的话,客户端和服务端都不要用,一个用一个不用是不行的(可能一个是大端和小端的问题)
    if (bind(listenfd, (struct sockaddr*)&servaddr, sizeof(servaddr)) != 0)//bind把服务端用于通信的地址和端口绑定到socket上。这个要用老的结构体,需要强制转换(端口范围是1024-65536非root用户)最大65535因端口是16位表示,且端口不能重复
    {
        perror("bind"); close(listenfd); return -1;
    }

    //sleep(10); //为了验证connect走到下一步就可以链接了
    // 第3步：把socket设置为监听模式。客户端的socket是个主动模式
    if (listen(listenfd, 5) != 0) { perror("listen"); close(listenfd); return -1; }
    //sleep(10); //为了验证connect走到上一步就可以链接了

    // 第4步：接受客户端的连接。
    int  clientfd;                  // 客户端的socket。
    int  socklen = sizeof(struct sockaddr_in); // struct sockaddr_in的大小
    struct sockaddr_in clientaddr;  // 客户端的地址信息。
    printf("验证等待中\n");
    //从已准备好的连接队列中获取一个请求,如果队列为空,accept函数将阻塞等待(accept可以理解,相应客户端的连接,准确来说就是前面所说)
    clientfd = accept(listenfd, (struct sockaddr*)&clientaddr, (socklen_t*)&socklen);//accept等待客户端的链接,服务端启动的时候如果没有客户端连接它会在accept这里等待,accept这个函数会返回一个socket clientfd是接收用的,之后下面的代码都是用clientfd
    //clientfd = accept(listenfd, 0, 0);//accept等待客户端的链接,让然给0就看不到客户端的地址了,当然现实开发当中需要客户ip地址
    printf("客户端（%s）已连接。\n", inet_ntoa(clientaddr.sin_addr));

    // 第5步：与客户端通信，接收客户端发过来的报文后，回复ok。
    char buffer[1024];
    while (1)
    {
        //不管是接收报文或者发送报文,都是用clientfd,服务端又监听listenfd那个socket(监听),但是他只负责接收客户端的连接丝线,然后用clientfd那个socket(收发)跟客户端通信
        int iret;
        memset(buffer, 0, sizeof(buffer));
        printf("如果连接上了不发会在recv等待\n");
        if ((iret = recv(clientfd, buffer, sizeof(buffer), 0)) <= 0) // 接收客户端的请求报文。也可以和先发后接收,但客户端与服务端要协调.iret和recv的返回值 socket连接断开了返回0 socket接收错误返回-1 正确接收返回接收到的字节数
        {
            printf("iret=%d\n", iret); break;   //客户端发完数据就退出去了关闭了socket,服务端的recv(正常的recv会等待)这里是直接关闭
        }
        printf("iret = %d,接收：%s\n",iret,buffer);

        strcpy(buffer, "ok");
        if ((iret = send(clientfd, buffer, strlen(buffer), 0)) <= 0) // 向客户端发送响应结果。
        {
            perror("send"); break;
        }
        printf("发送：%s\n", buffer);
    }

    // 第6步：关闭socket，释放资源。最后不管是hi服务端还是客户端都需要调用close去关闭socket
    close(listenfd); close(clientfd);
}

//以上配置在linux下的gcc

//在socket通信的客户端和服务端的程序里,出现了多种数据结构,调用了多个函数,涉及到很多方面的知识,以上代码可以修改的地方非常少
//对于初学者来所最懵的是第二步,结构体后面会讲
// socket文件描述符
// 在unix系统中一切输入输出设备皆文件,socket()函数的返回值其本质是一个文件描述符,是一个整数
// servaddr.sin_port = htons(atoi(argv[1]));  // 指定通信端口。使用网络字节顺序,为了兼容性还是用比较好,网络字节顺序后面会讲
//
// 网络编程难度最大,应用场景多,必须了解每个重要细节(老师的)
// 1真正精通网络编程
// 2面试可能会问到很细节的内容
// 3我只讲我理解的知识点,我没用过或不熟的就不瞎掰了
// 
//socket函数详解
// socket函数用于创建新的socket也就是像系统申请一个socket资源,socket函数用户客户端和服务端
//函数声明
// int socket(int domain, int type, int protocol);
// domain:协议域，又称协议族。(family)。常用的协议族有AF_INET(ipv4)、AF_INET6(ipv6)、AF_LOCAL(或称AF_UNIX，UnixlSocket) .AF ROUTE等。协议族决定了socket的地址类型，在通信中必须采用对应的地址，如AF INET决定了要用ipv4地址(32位的)与端口号(16位的)的组合、AF_UNIX决定了要用一个绝对路径名作为地址。
// type:指定socket类型。常用的socket类型有SOCK STREAM(流)、SocK DGRAM(数据包)、SOCK RAw、SOCK PACXET、SOCK SEQPACKET等。流式socket(5OCK STREAM)是一种面向连接的socket，针对于面向连接的TCP服务应用。数据报式socket(socK_DGRAM)种无连接的socket，对应于无连接的UDP服务应用。
// protocol : 指定协议。常用协议有lPPROTo_TCP、IppROTo_uDP、IppROTO_STCP、IpPROTO_TIPC等，分别对应TCP传输协议UDP传输协议.STCP传输协议.TIPC传输协议。
// 说了一大堆废话，第一个参数只能填AF_INET，第二个参数只能填SOCK_STREAM，第三个参数只能填0.除非系统资料耗尽。socket函数一般不会返回失败。
// 在一个文件中可以打开多少个socket,默认是3-1023个,这个由系统限制的
// 
//主机字节序和网络字节序
// 在服务端与客户选有两段代码跟IP地址和端口相关的,要搞清楚不要似懂非懂
// 字节顺序是指占内存多于一个字节类型的数据在内存中的存放顺序，一个32位整数由4个字节组成。内存中存储这4个字节有两种方法:一种是将低序字节存储在起始地址，这称为小端(little-endian)字节序;另一种方法是将高序字节存储在起始地址，这称为大端(big-endian)字节序
// 这两种字节序之间没有标准可循，两种格式都有系统使用。比如，Inter x86、ARM核采用的是小端模式，Power PC、MIPS UNIX和HP-PA UNIX采用大端模式。
// 大于一个字节类型的数据在内存中的存放有顺序，一个字节的数据没有顺序的问题。
//网络字节序
// 网络字节序:网络字节序是TCP/IP中规定好的一种数据表示格式，它与具体的CPU类型、操作系统等无关，从而可以保证数据在不同主机之间传输时能够被正确解释。网络字节序采用big endian排序方式。
//主机字节序
// 主机字节序:不同的机器主机字节序不相同，与CPU设计有关，数据的顺序是由cpu决定的，而与操作系统无关。
//由于这个原因不同体系结构的机器之间无法通信，所以要转换成一种约定的字节序，也就是网络字节序。即使是同一台机器上的两个进程(比如一个由C语言，另一个由Java编写弓)通信, 也要考虑字节序的问题(JVM采用大端字节序)。
//网络字节序与主机字节序之间的转换函数 : htons().ntohs().htonl()、ntohl(), htons和ntohs完成16位无符号数的相互转换，htonl和ntohl完成32位无符号数的相互转换。host to network short long
//因主机上的c和java字节序不同,会有通讯的问题,所以写程序的时候统一写成网络字节序,所以有4种转换函数
//地址和端口
// tcp协议种的主机地址和端口采用整数来表示
// 192.168.190.134
// 11000000 10101000 10111110 10000110
// 3232284294
// 10000110 10111110 10101000 11000000
// 2260641980
// 转换成网络字节顺序htonl(3232261324);11000000 10101000 01100100 11001100=3232261324 变成网络就是3429148864
// 因为在tcp种用的都是网络字节序,所以编程的时候要转换成网络字节序
// 
// 网络编程的结构体
  struct sockaddr
  {
      unsigned short sa_family; // 地址类型, AF_xxx 就是socket函数的第一个参数
      char sa_data[14]; // 14字节的端口和地址,因为操作不便所以提供了sockaddr_in结构体
  };
  struct sockaddr_in {
      short int sin_family; // 地址类型
      unsigned short int sin_port; // 端口号,两个无符号字节
      struct in_addr sin_addr; // 地址,结构体
      unsigned char sin_zero[8]; //为了保持与struct sockaddr一样的长度。结构体大小一样可以强制转换,涉及到内存对齐
  };
  struct in_addr {
      unsigned long s_addr;//地址,无符号的长整数
  };
  struct hostent {
      char* h_name;//主机名。
      char** h_aliases;//主机所有别名构成的字符串数组，同一IP可绑定多个域名。
      int h_addrtype;//主机IP地址的类型，例如IPV4(AF_INET)还是IPV6.
      int h_length;//主机IP地址长度，IPV4地址为4，IPV6地址则为16.
      char** h_addr_list; // 主机的ip地址，以网络字节序存储。因为域名和地址可以有一对多的关系
  };
#define h_addr h_addr_list[0] /* for backward compatibility */
//gethostbyname函数可以利用字符串格式的域名获得IP网络字节顺序地址.
  struct hostent* gethostbyname(const char* name);

 int inet_aton(const char* cp, struct in_addr* inp);
 //将一个字符串IP地址转换为一个32位的网络字节序IP地址。如果这个函数成功，函数的返回值非零，如果输入地址不正确则会返回零。使用这个函数并没有错误码存放在errno中，所以它的值会被忽略。
 char* inet_ntoa(struct in_addr in);
 //把网络字节序IP地址转换成字符串的lP地址。
 in_addr_t inet_addr(const char* cp);//这个和第一个函数功能是一样的,用了不同的地址
 //这个是把字符串转换成整数的地址
 // 
 //bind函数
 //int bind(int sockfd, struct sockaddr *my_addr, int addrlen);sockfd是由socket函数调用返回的文件描述符。my_addr是一个指向sockaddr的指针。addrlen是sockaddr结构的长度。
 //bind(listenfd, (struct sockaddr*)&servaddr, sizeof(servaddr);//参数文件描述符, 服务端地址信息, 服务端地址信息的大小.端口范围是1024-65535范围
 //服务端程序的端口释放后可能会处于TIME_WAIT状态，等待两分钟之后才能再被使用，SO_REUSEADDR是让端口释放后立即就可以被再次使用。
 //设置SO_REUSEADDR选项。(第二步上面和第一步下面位置)
 int opt = 1; unsigned int len = sizeof(opt);
 setsockopt(listenfd,SOL_SOCKET,SO_REUSEADDR,&opt,len);
 //
 // listen(),connect(),accept()函数
 // 声明
 // int listen(int sockfd,int backlog);此函数宣告服务器可以接受连接请求,
 // sockfd是bind后的文件描述符。
 // backlog设置请求排队的最大长度。当有多个客户端程序和服务端相连时，使用这个表示可以介绍的排队长度。
 // listen函数将bind的文件描述符变为监听套接字，返回的情况和bind一样。
 // 
 // int accept(int sockfd, struct sockaddr *addr,int *addrlen);
 // 服务器使用此函数获得连接请求，并且建立连接。
 // sockfd是listen后的文件描述符。
 // addr，addrlen是用来给客户端的程序填写的, 服务器端只要传递指针就可以了， bind, listen和accept是服务器端用的函数。
 // accept调用时，服务器端的程序会一直阻塞到有一个客户程序发出了连接。 accept成功时返回最后的服务器端的文件描述符(用于和客户端通信)，这个时候服务器端可以向该描述符写信息了，失败时返回 - 1 。
 // 
 // int connect(int sockfd, struct sockaddr * serv_addr,int addrlen);
 // 可以用connect建立一个连接，在connect中所指定的地址是想与之通信的服务器的地址。
 // sockfd是socket函数返回的文件描述符。
 // serv_addr储存了服务器端的连接信息，其中sin_add是服务端的地址。
 // addrlen是serv_addr的长度
 // connect函数是客户端用来同服务端连接的.成功时返回0，sockfd是同服务端通讯的文件描述符，失败时返回 - 1。
 // 
 //  列子
 // listen(listenfd, 5);//参数分别是socket,有点难.关心失败的,成功返回0,失败返回-1
 // 在listen到accept之间有个队列,客户端的请求信息全放在里了,从执行完listen这个函数就已经放进去了,如果客户端突然关掉返回失败
 // accept(listenfd, (struct sockaddr*)&clientaddr, (socklen_t*)&socklen);//参数是socket(文件描述符监听用),客户端结构体的地址,客户端数据类型的大小地址
 // connect(sockfd, (struct sockaddr*)&servaddr, sizeof(servaddr);参数是socket(文件描述符监听用),服务端结构体的信息,服务端结构体的长度
 //
 //tcp的三次握手与连接队列
 // 
 //
 //
